
	// Column

	.column(@count, @margin, @index) {
		width: (((100% / @count) * @index) - (@margin * 2));
	}

	// Columns

	.columns(@class, @margin, @count, @combo:~"", @index:1) when (@index <= @count) {
		// Percentage
		& when (@combo = "") {
			.@{class}-@{index} {
				.column(@count, @margin, @index);
			}
		}
		& when not (@combo = "") {
			[class*="@{combo}"] {
				&.@{class}-@{index} {
					.column(@count, @margin, @index);
				}
			}
		}

		.columns(@class, @margin, @count, @combo, (@index + 1));
	}

	// Columns - Fractioned

	.columnsFractioned(@class, @margin, @combo:~"") {
		// Percentage
		& when (@combo = "") {
			.@{class}-fifth {
				.column(5, @margin, 1);
			}
			.@{class}-fourth {
				.column(4, @margin, 1);
			}
			.@{class}-third {
				.column(3, @margin, 1);
			}
			.@{class}-half {
				.column(2, @margin, 1);
			}
			.@{class}-full {
				.column(1, @margin, 1);
			}
		}
		& when not (@combo = "") {
			[class*="@{combo}"] {
				&.@{class}-fifth {
					.column(5, @margin, 1);
				}
				&.@{class}-fourth {
					.column(4, @margin, 1);
				}
				&.@{class}-third {
					.column(3, @margin, 1);
				}
				&.@{class}-half {
					.column(2, @margin, 1);
				}
				&.@{class}-full {
					.column(1, @margin, 1);
				}
			}
		}
	}

	// Columns - Pushed

	.columnPushed(@count, @margin, @index) {
		margin-left:((100% / @count) * @index) + @margin;
	}

	.columnsPushed(@class, @margin, @count, @combo:~"", @index:1) when (@index < @count) {
		& when (@combo = "") {
			.@{class}-push-@{index} {
				.columnPushed(@count, @margin, @index);
			}
		}
		& when not (@combo = "") {
			[class*="@{combo}"] {
				&.@{class}-push-@{index} {
					.columnPushed(@count, @margin, @index);
				}
			}
		}

		.columnsPushed(@class, @margin, @count, @combo, (@index + 1));
	}

	.columnsPushedFractioned(@class, @margin, @combo:~"") {
		& when (@combo = "") {
			.@{class}-push-fifth {
				.columnPushed(5, @margin, 1);
			}
			.@{class}-push-fourth {
				.columnPushed(4, @margin, 1);
			}
			.@{class}-push-third {
				.columnPushed(3, @margin, 1);
			}
			.@{class}-push-half {
				.columnPushed(2, @margin, 1);
			}
		}
		& when not (@combo = "") {
			[class*="@{combo}"] {
				.@{class}-push-fifth {
					.columnPushed(5, @margin, 1);
				}
				.@{class}-push-fourth {
					.columnPushed(4, @margin, 1);
				}
				.@{class}-push-third {
					.columnPushed(3, @margin, 1);
				}
				.@{class}-push-half {
					.columnPushed(2, @margin, 1);
				}
			}
		}
	}

	// Generate - Base

	.generateGridBase(@class) {
		// Fractions
		.columnsFractioned(@class, @fs-grid-gutter, "");

		// Fractions Push
		.columnsPushedFractioned(@class, @fs-grid-gutter, "");

		// Fractions Contained
		.columnsFractioned(@class, 0, ~"@{fs-grid-class-contained}");

		// Fractions Contained Push
		.columnsPushedFractioned(@class, 0, ~"@{fs-grid-class-contained}");

		// Centered
		[class*="@{class}"][class*="@{fs-grid-class-centered}"] {
			float: none;
			margin-left: auto;
			margin-right: auto;
		}

		// Hide
		.@{class}-hide {
			display: none;
		}
	}

	// Generate - Grid

	.generateGrid(@class, @columns) {
		// Cells
		.columns(@class, @fs-grid-gutter, @columns, "");

		// Cells Push
		.columnsPushed(@class, @fs-grid-gutter, @columns, "");

		// Contained
		.columns(@class, 0, @columns, ~"@{fs-grid-class-contained}");

		// Contained Push
		.columnsPushed(@class, 0, @columns, ~"@{fs-grid-class-contained}");
	}